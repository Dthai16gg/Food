// <auto-generated />
using System;
using Common.Common.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(CommonContext))]
    [Migration("20230712131357_Migration_version_1.0")]
    partial class Migration_version_10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Common.Common.Entity.Entity.Account.Accounts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("AuthorRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorRoleId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Account.AuthorRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Author Roles", (string)null);
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Combo.ComboMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NormalFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("NormalFoodId");

                    b.ToTable("ComboMappings");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Combo.Combos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Delivery.DeliveryDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShippingMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Delivery.ShippingMethods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name Shipping Methods");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Oder.Oder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PK_Order");

                    b.Property<Guid?>("AccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.ToTable("Oder");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Oder.OderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NormalFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("NormalFoodId");

                    b.HasIndex("OderId");

                    b.HasIndex("PizzaId");

                    b.HasIndex("TransactionReportId");

                    b.ToTable("OderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_DrinkId");

                    b.HasIndex("TitleId");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.NormalFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("NormalFoods");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaPan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK_PizzaPan");

                    b.ToTable("PizzaPans");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_PizzaProduct");

                    b.HasIndex("TitleId");

                    b.ToTable("PizzaProducts");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK_PizzaSize");

                    b.ToTable("PizzaSizes");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PriceMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaPanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_PriceMapping");

                    b.HasIndex("PizzaPanId");

                    b.HasIndex("PizzaSizeId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceMappings");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Title");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.PaymentMethods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_PaymentMethods");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.TransactionReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_TransactionReport");

                    b.HasIndex("DeliveryDetailsId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("TransactionReports");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Voucher");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Account.Accounts", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Account.AuthorRole", "AuthorRoles")
                        .WithMany("Accounts")
                        .HasForeignKey("AuthorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AuthorRoleId");

                    b.Navigation("AuthorRoles");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Combo.ComboMapping", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Combo.Combos", "Combos")
                        .WithMany("ComboMappings")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ComboId");

                    b.HasOne("Common.Common.Entity.Entity.Product.PizzaProduct", "PizzaProducts")
                        .WithMany("ComboMappings")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ProductId");

                    b.HasOne("Common.Common.Entity.Entity.Product.Drink", "Drinks")
                        .WithMany("ComboMappings")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_DrinkId");

                    b.HasOne("Common.Common.Entity.Entity.Product.NormalFood", "NormalFoods")
                        .WithMany("ComboMappings")
                        .HasForeignKey("NormalFoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_NormalFoodId");

                    b.Navigation("Combos");

                    b.Navigation("Drinks");

                    b.Navigation("NormalFoods");

                    b.Navigation("PizzaProducts");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Combo.Combos", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Product.Title", "Title")
                        .WithMany("Combos")
                        .HasForeignKey("TitleId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Delivery.DeliveryDetails", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Delivery.ShippingMethods", "ShippingMethods")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShippingMethodId");

                    b.HasOne("Common.Common.Entity.Entity.Account.Accounts", "Accounts")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserId");

                    b.Navigation("Accounts");

                    b.Navigation("ShippingMethods");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Oder.Oder", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Account.Accounts", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountsId");

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Oder.OderDetails", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Combo.Combos", "Combo")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ComboId");

                    b.HasOne("Common.Common.Entity.Entity.Product.Drink", "Drink")
                        .WithMany("OderDetails")
                        .HasForeignKey("DrinkId");

                    b.HasOne("Common.Common.Entity.Entity.Product.NormalFood", "NormalFood")
                        .WithMany("OrderDetails")
                        .HasForeignKey("NormalFoodId");

                    b.HasOne("Common.Common.Entity.Entity.Oder.Oder", "Oder")
                        .WithMany("OderDetails")
                        .HasForeignKey("OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Common.Entity.Entity.Product.PizzaProduct", "PizzaProduct")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PizzaId");

                    b.HasOne("Common.Common.Entity.Entity.Transaction.TransactionReport", null)
                        .WithMany("OderDetails")
                        .HasForeignKey("TransactionReportId");

                    b.Navigation("Combo");

                    b.Navigation("Drink");

                    b.Navigation("NormalFood");

                    b.Navigation("Oder");

                    b.Navigation("PizzaProduct");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.Drink", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Product.Title", "Title")
                        .WithMany("Drinks")
                        .HasForeignKey("TitleId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.NormalFood", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Product.Title", "Title")
                        .WithMany("NormalFoods")
                        .HasForeignKey("TitleId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaProduct", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Product.Title", "Title")
                        .WithMany("PizzaProducts")
                        .HasForeignKey("TitleId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PriceMapping", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Product.PizzaPan", "PizzaPans")
                        .WithMany("PriceMappings")
                        .HasForeignKey("PizzaPanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PriceMapping_PizzaPan");

                    b.HasOne("Common.Common.Entity.Entity.Product.PizzaSize", "PizzaSize")
                        .WithMany("PriceMappings")
                        .HasForeignKey("PizzaSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PriceMapping_PizzaSize");

                    b.HasOne("Common.Common.Entity.Entity.Product.PizzaProduct", "PizzaProducts")
                        .WithMany("PriceMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PriceMapping_PizzaProduct");

                    b.Navigation("PizzaPans");

                    b.Navigation("PizzaProducts");

                    b.Navigation("PizzaSize");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.TransactionReport", b =>
                {
                    b.HasOne("Common.Common.Entity.Entity.Delivery.DeliveryDetails", "DeliveryDetails")
                        .WithMany("TransactionReports")
                        .HasForeignKey("DeliveryDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TransactionReport_OrderDetail");

                    b.HasOne("Common.Common.Entity.Entity.Transaction.PaymentMethods", "PaymentMethods")
                        .WithMany("TransactionReports")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TransactionReport_PaymentMethod");

                    b.HasOne("Common.Common.Entity.Entity.Account.Accounts", "Accounts")
                        .WithMany("TransactionReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TransactionReport_Transaction");

                    b.HasOne("Common.Common.Entity.Entity.Transaction.Voucher", null)
                        .WithMany("TransactionReports")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Accounts");

                    b.Navigation("DeliveryDetails");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Account.Accounts", b =>
                {
                    b.Navigation("DeliveryDetails");

                    b.Navigation("TransactionReports");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Account.AuthorRole", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Combo.Combos", b =>
                {
                    b.Navigation("ComboMappings");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Delivery.DeliveryDetails", b =>
                {
                    b.Navigation("TransactionReports");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Delivery.ShippingMethods", b =>
                {
                    b.Navigation("DeliveryDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Oder.Oder", b =>
                {
                    b.Navigation("OderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.Drink", b =>
                {
                    b.Navigation("ComboMappings");

                    b.Navigation("OderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.NormalFood", b =>
                {
                    b.Navigation("ComboMappings");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaPan", b =>
                {
                    b.Navigation("PriceMappings");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaProduct", b =>
                {
                    b.Navigation("ComboMappings");

                    b.Navigation("OrderDetails");

                    b.Navigation("PriceMappings");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.PizzaSize", b =>
                {
                    b.Navigation("PriceMappings");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Product.Title", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Drinks");

                    b.Navigation("NormalFoods");

                    b.Navigation("PizzaProducts");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.PaymentMethods", b =>
                {
                    b.Navigation("TransactionReports");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.TransactionReport", b =>
                {
                    b.Navigation("OderDetails");
                });

            modelBuilder.Entity("Common.Common.Entity.Entity.Transaction.Voucher", b =>
                {
                    b.Navigation("TransactionReports");
                });
#pragma warning restore 612, 618
        }
    }
}
